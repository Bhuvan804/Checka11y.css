/*! Checka11y.css v1.0.0-beta.0 | MIT License | github.com/jackdomleo7/Checka11y.css */

:root {
  /**
    * Colors
    * Colors are broken down into RGB and A variables to be combined for the main color
    */

  --text-error: #721c24;
  --bg-error: #ffc6c6;
  --border-error: #f00;

  --text-warning: #856404;
  --bg-warning: #ffffd8;
  --border-warning: #ff6;

  /* Scale */
  --space: 0.25rem;

  --space-0: calc(var(--space) * 0);
  --space-2: calc(var(--space) * 2);
  --space-4: calc(var(--space) * 4);
  --space-6: calc(var(--space) * 6);
}

/**
  * Base Styles
  * To use in SCSS with the @extend & @include command.
  */
%alert {
  display: block;
  padding: var(--space-4) var(--space-6);
  margin: var(--space-2) auto var(--space-6);
  border-radius: 2rem;
}

%alertError {
  @extend %alert;
  color: var(--text-error);
  background-color: var(--bg-error);
  border: 0.5rem solid var(--border-error);
}

%alertWarning {
  @extend %alert;
  color: var(--text-warning);
  background-color: var(--bg-warning);
  border: 0.5rem solid var(--border-warning);
}

%content {
  display: block;
  font-size: 1.2rem;
  font-weight: 700;
  padding: var(--space-4) var(--space-6);
  border-radius: 0.75rem;
}

%contentError {
  @extend %content;
  color: var(--text-error);
  border: 0.4rem solid var(--border-error);
  background-color: var(--bg-error);
}

%contentWarning {
  @extend %content;
  color: var(--text-warning);
  border: 0.4rem solid var(--border-warning);
  background-color: var(--bg-warning);
}

@mixin contentMessage($errorType, $message) {
  @if $errorType == error {
    content: "ERROR: #{$message}" !important;
  }
  @else if $errorType == warning {
    content: "WARNING: #{$message}" !important;
  }
  @else {
    @error "The errorType must be either error or warning.";
  }
}


/**
  * HTML
  */

/* html element requires a lang attribute */
html:not( [lang] ) body {
  border: 0.5rem solid var(--border-error);

  &::before {
    @extend %contentError;
    @include contentMessage(error, "html has no lang attribute.");
  }
}

/* html element lang attribute must not be empty */
html[lang = ""] body {
  border: 0.5rem solid var(--border-error);

  &::before {
    @extend %contentError;
    @include contentMessage(error, "html lang attribute should not be empty.");
  }
}


/**
  * Images
  */

/* All images require an alt attribute */
img:not( [alt] ) {
  @extend %alertError;
}


/**
  * iframe
  */

/* All iframe must have title attribute */
iframe:not( [title] ) {
  @extend %alertError;

  &::after {
    @extend %contentError;
    @include contentMessage(error, "iframe has no title attribute.");
  }
}


/**
  * Lists
  */

/* All direct children of <ul> and <ol> must only be <li> */
ol,
ul {
  > *:not( li ) {
    @extend %alertError;

    &::after {
      @extend %contentError;
      @include contentMessage(error, "List markup invalid. Ensure <li> is the only direct child of <ul> or <ol>.");
    }
  }
}

/* All direct children of <dl> must only be <dt> or <dd> */
dl > *:not( dt ):not( dd ) {
  @extend %alertError;

  &::after {
    @extend %contentError;
    @include contentMessage(error, "List markup invalid. Ensure that the only direct children of <dl> are <dt> and <dd>.");
  }
}


/**
  * Navigation
  */

/* If more than one primary navigation is available, all navigations must be clearly labelled. */
nav:not( [aria-label] ):not( [aria-labelledby] ) ~ nav,
nav ~ nav:not( [aria-label] ):not( [aria-labelledby] ) {
  @extend %alertError;

  &::after {
    @extend %contentError;
    @include contentMessage(error, "<nav> indicates the primary navigation for the page. In cases where multiple primary navigations exist, an aria-label or aria-labelledby attribute must be present on both <nav> tags.");
  }
}


/**
  * Links
  */

/* Warn when opening a link in a new tab or window */
a[target = "_blank"] {
  @extend %alertWarning;

  &::after {
    @extend %contentWarning;
    @include contentMessage(warning, "Links that open in a new tab or window should be communicated to the user, ensure the user knows of this behavior.");
  }
}


/**
  * Invalid HTML nested inside <a>
  */

a {
  audio[controls] {
    @extend %alertError;

    &::after {
      @include contentMessage(error, "Ensure that <audio> with controls attribute is not a child of <a> as it is an invalid HTML.");
    }
  }

  button {
    @extend %alertError;

    &::after {
      @include contentMessage(error, "Ensure that <button> is not a child of <a> as it is an invalid HTML.");
    }
  }

  details {
    @extend %alertError;

    &::after {
      @include contentMessage(error, "Ensure that <details> is not a child of <a> as it is an invalid HTML.");
    }
  }

  embed {
    @extend %alertError;

    &::after {
      @include contentMessage(error, "Ensure that <embed> is not a child of <a> as it is an invalid HTML.");
    }
  }

  iframe {
    @extend %alertError;

    &::after {
      @include contentMessage(error, "Ensure that <iframe> is not a child of <a> as it is an invalid HTML.");
    }
  }

  img[usemap] {
    @extend %alertError;

    &::after {
      @include contentMessage(error, "Ensure that <img usemap=''> is not a child of <a> as it is an invalid HTML.");
    }
  }

  input:not( [type = "hidden"] ) {
    @extend %alertError;

    &::after {
      @include contentMessage(error, "Ensure that non hidden <input> is not a child of <a> as it is an invalid HTML.");
    }
  }

  label {
    @extend %alertError;

    &::after {
      @include contentMessage(error, "Ensure that <label> is not a child of <a> as it is an invalid HTML.");
    }
  }

  object[usemap] {
    @extend %alertError;

    &::after {
      @include contentMessage(error, "Ensure that <object usemap=''> is not a child of <a> as it is an invalid HTML.");
    }
  }

  select {
    @extend %alertError;

    &::after {
      @include contentMessage(error, "Ensure that <select> is not a child of <a> as it is an invalid HTML.");
    }
  }

  textarea {
    @extend %alertError;

    &::after {
      @include contentMessage(error, "Ensure that <textarea> is not a child of <a> as it is an invalid HTML.");
    }
  }

  video[controls] {
    @extend %alertError;

    &::after {
      @include contentMessage(error, "Ensure that <video controls> is not a child of <a> as it is an invalid HTML.");
    }
  }
}
